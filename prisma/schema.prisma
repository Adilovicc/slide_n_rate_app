datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

generator client {
  provider = "prisma-client-js"
}

//SLIDER

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("regular")
  currentPost   Int       @default(0)
  userExam      UserExam[]
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  exams         Exam[]
  recensions     Recension[]
  notes         Note[]
}

model Exam{
  id String @id @default(cuid())
  title String @default("No name")
  createdAt DateTime @default(now())
  createdBy String 
  posts Post[]
  userExam UserExam[]
  postsTotal Int @default(0)
  membersTotal Int @default(0)
  multipleSelection Boolean? @default(false)
  offeredAnswers String[]
  description String?
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model UserExam{
    id String @id @default(cuid())
    examId String
    exam Exam @relation(fields:[examId], references:[id], onDelete:Cascade)
    userId String
    user User @relation(fields:[userId],references:[id],onDelete: Cascade)
    userAddedTime DateTime @default(now())

    @@unique([examId,userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
    id String @id @default(cuid())
    fileUrl String 
    name String?
    type String?
    createdAt DateTime @default(now())
    creatorId String
    examId String
    recensions Recension[]
    notes Note[]
    //this part is maintained by the database trigger functions
    numberOfReviews Int @default(0)
    sumOfReviews    Int @default(0)
    avgRating       Float @default(0.00)

    exam Exam @relation(fields: [examId], references:[id], onDelete: Cascade)
    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Note{
   id String @id @default(cuid())
   text String
   currentPost Int
   postName String?
   userId String
   postId String
   examId String
   userEmail String
   user User @relation(fields:[userId], references: [id], onDelete: Cascade)
   post Post @relation(fields:[postId], references: [id], onDelete: Cascade)

   @@unique([userId,postId])
}

model Recension {
   id String @id @default(cuid())
   grade Int[]
   createdAt DateTime @default(now())
   postId String
   userId String

   ratedBy User @relation(fields: [userId], references:[id], onDelete:Cascade)
   forPost Post @relation(fields: [postId], references: [id], onDelete: Cascade)  

   @@unique([postId, userId])
}